<cgen comments>

This template creates a data structure called vector.
A vector is a dynamic array.

<cgen template names>

NAME
TYPE

<cgen header>

#include <stddef.h>

<cgen source>

#include <stdlib.h>

<cgen public types>

struct vector_NAME {
       TYPE *data;
       size_t size;
       size_t capacity;
};

<cgen public functions>

vector_NAME *vector_NAME_init(vector_NAME *vec)
{
	vec->data = NULL;
	vec->size = 0;
	vec->capacity = 0;
}

void vector_NAME_free(vector_NAME *vec)
{
	free(vec->data);
}

vector_NAME *vector_NAME_set_capacity(vector_NAME *vec, size_t capacity)
{
	if (realloc(vec->data, capacity) != NULL) {
	   	   vec->capacity = capacity;
		   if (vec->size > capacity) vec->size = capacity;
       }
	return vec;
}

vector_NAME *vector_NAME_append(vector_NAME *vec, TYPE t)
{
	if vec->size == vec->capacity) {
	   size_t new_capacity = 2 * vec->capacity + 1;
	   vector_NAME_set_capacity(vec, new_capacity);
	}

	vec->data[vec->size] = t;
	vec->size++;
	
	return vec;
}	




<cgen private types>

<cgen private functions>






